// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="comm_reader,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.778250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=657,HLS_SYN_LUT=594}" *)

module comm_reader (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        comm_read_req_V_num_din,
        comm_read_req_V_num_full_n,
        comm_read_req_V_num_write,
        comm_read_req_V_addr_din,
        comm_read_req_V_addr_full_n,
        comm_read_req_V_addr_write,
        comm_read_resp_V_last_dout,
        comm_read_resp_V_last_empty_n,
        comm_read_resp_V_last_read,
        comm_read_resp_V_data_V_dout,
        comm_read_resp_V_data_V_empty_n,
        comm_read_resp_V_data_V_read,
        comm_next_data_input_buf_addr_V_dout,
        comm_next_data_input_buf_addr_V_empty_n,
        comm_next_data_input_buf_addr_V_read,
        comm_next_data_input_buf_addr_req_V_din,
        comm_next_data_input_buf_addr_req_V_full_n,
        comm_next_data_input_buf_addr_req_V_write,
        user_input_data_V_V_din,
        user_input_data_V_V_full_n,
        user_input_data_V_V_write,
        free_input_req_V_din,
        free_input_req_V_full_n,
        free_input_req_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
output  [7:0] comm_read_req_V_num_din;
input   comm_read_req_V_num_full_n;
output   comm_read_req_V_num_write;
output  [63:0] comm_read_req_V_addr_din;
input   comm_read_req_V_addr_full_n;
output   comm_read_req_V_addr_write;
input   comm_read_resp_V_last_dout;
input   comm_read_resp_V_last_empty_n;
output   comm_read_resp_V_last_read;
input  [511:0] comm_read_resp_V_data_V_dout;
input   comm_read_resp_V_data_V_empty_n;
output   comm_read_resp_V_data_V_read;
input  [63:0] comm_next_data_input_buf_addr_V_dout;
input   comm_next_data_input_buf_addr_V_empty_n;
output   comm_next_data_input_buf_addr_V_read;
output   comm_next_data_input_buf_addr_req_V_din;
input   comm_next_data_input_buf_addr_req_V_full_n;
output   comm_next_data_input_buf_addr_req_V_write;
output  [511:0] user_input_data_V_V_din;
input   user_input_data_V_V_full_n;
output   user_input_data_V_V_write;
output   free_input_req_V_din;
input   free_input_req_V_full_n;
output   free_input_req_V_write;

reg ap_idle;
reg comm_next_data_input_buf_addr_V_read;
reg comm_next_data_input_buf_addr_req_V_write;
reg user_input_data_V_V_write;
reg free_input_req_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    comm_next_data_input_buf_addr_req_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] apply_transferring_b_reg_134;
reg   [0:0] ap_reg_pp0_iter1_apply_transferring_b_reg_134;
reg   [0:0] transferring_buf_val_reg_158;
reg    free_input_req_V_blk_n;
reg   [0:0] valid_read_resp_1_reg_224;
reg   [0:0] full_n_1_reg_436;
reg   [0:0] tmp_s_reg_440;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op72_write_state4;
reg    ap_predicate_op80_write_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] valid_read_resp_reg_146;
reg   [15:0] issued_read_req_cnt_reg_170;
reg   [0:0] transferring_buf_val_1_reg_181;
reg   [15:0] issued_read_req_cnt_2_reg_210;
reg   [0:0] empty_n_reg_415;
reg   [0:0] apply_transferring_b_phi_fu_138_p4;
reg   [0:0] valid_read_resp_phi_fu_150_p4;
wire   [0:0] tmp_2_fu_330_p2;
reg   [0:0] tmp_2_reg_427;
reg   [0:0] transferring_buf_val_1_phi_fu_184_p6;
wire   [0:0] full_n_nbwrite_fu_100_p5;
reg   [0:0] full_n_reg_431;
wire   [0:0] full_n_1_nbwrite_fu_111_p3;
wire   [0:0] valid_read_resp_1_phi_fu_227_p4;
wire   [0:0] tmp_s_fu_371_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] apply_transferring_b_1_phi_fu_199_p6;
reg   [0:0] valid_read_resp_3_phi_fu_239_p8;
reg   [0:0] transferring_buf_val_phi_fu_162_p4;
reg   [0:0] transferring_buf_val_2_phi_fu_258_p6;
reg   [15:0] issued_read_req_cnt_phi_fu_174_p4;
reg   [15:0] issued_read_req_cnt_5_phi_fu_274_p6;
wire   [0:0] ap_phi_precharge_reg_pp0_iter1_transferring_buf_val_1_reg_181;
wire   [0:0] not_empty_n_i_fu_316_p2;
wire   [0:0] ap_phi_precharge_reg_pp0_iter1_apply_transferring_b_1_reg_195;
wire   [15:0] p_issued_read_req_cnt_fu_322_p3;
wire   [15:0] ap_phi_precharge_reg_pp0_iter1_issued_read_req_cnt_2_reg_210;
reg   [15:0] issued_read_req_cnt_2_phi_fu_213_p6;
wire   [0:0] ap_phi_precharge_reg_pp0_iter0_valid_read_resp_1_reg_224;
reg   [0:0] ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224;
wire   [0:0] ap_phi_precharge_reg_pp0_iter1_valid_read_resp_3_reg_235;
wire   [0:0] ap_phi_precharge_reg_pp0_iter2_transferring_buf_val_2_reg_254;
wire   [15:0] p_issued_read_req_cnt_2_fu_388_p3;
wire   [15:0] ap_phi_precharge_reg_pp0_iter2_issued_read_req_cnt_5_reg_270;
reg    comm_read_resp_V_last0_update;
wire   [0:0] empty_n_1_nbread_fu_92_p3_0;
reg    comm_read_req_V_num1_update;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] consumed_data_size_fu_74;
wire   [31:0] consumed_data_size_1_fu_365_p2;
reg   [63:0] tmp_fu_78;
reg   [511:0] tmp_V_fu_82;
wire   [25:0] tmp_4_fu_339_p3;
wire   [63:0] tmp_5_fu_347_p1;
wire   [15:0] issued_read_req_cnt_1_fu_382_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_194;
reg    ap_condition_162;
reg    ap_condition_161;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_194 == 1'b1)) begin
        if ((1'd0 == valid_read_resp_phi_fu_150_p4)) begin
            ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224 <= empty_n_1_nbread_fu_92_p3_0;
        end else if ((1'd1 == valid_read_resp_phi_fu_150_p4)) begin
            ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224 <= valid_read_resp_phi_fu_150_p4;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224 <= ap_phi_precharge_reg_pp0_iter0_valid_read_resp_1_reg_224;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        apply_transferring_b_reg_134 <= apply_transferring_b_1_phi_fu_199_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        apply_transferring_b_reg_134 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'd1 == full_n_1_nbwrite_fu_111_p3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == tmp_s_fu_371_p2))) begin
        consumed_data_size_fu_74 <= consumed_data_size_1_fu_365_p2;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'd1 == full_n_1_nbwrite_fu_111_p3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_s_fu_371_p2)))) begin
        consumed_data_size_fu_74 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_phi_fu_162_p4)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (apply_transferring_b_reg_134 == 1'd0) & (1'd1 == transferring_buf_val_phi_fu_162_p4)))) begin
        issued_read_req_cnt_2_reg_210 <= issued_read_req_cnt_phi_fu_174_p4;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (apply_transferring_b_reg_134 == 1'd1))) begin
        issued_read_req_cnt_2_reg_210 <= p_issued_read_req_cnt_fu_322_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        issued_read_req_cnt_2_reg_210 <= ap_phi_precharge_reg_pp0_iter1_issued_read_req_cnt_2_reg_210;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        issued_read_req_cnt_reg_170 <= issued_read_req_cnt_5_phi_fu_274_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        issued_read_req_cnt_reg_170 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_161 == 1'b1)) begin
        if (((apply_transferring_b_reg_134 == 1'd0) & (1'd1 == transferring_buf_val_phi_fu_162_p4))) begin
            transferring_buf_val_1_reg_181 <= transferring_buf_val_phi_fu_162_p4;
        end else if (((apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_phi_fu_162_p4))) begin
            transferring_buf_val_1_reg_181 <= 1'd0;
        end else if ((apply_transferring_b_reg_134 == 1'd1)) begin
            transferring_buf_val_1_reg_181 <= empty_n_reg_415;
        end else if ((1'b1 == 1'b1)) begin
            transferring_buf_val_1_reg_181 <= ap_phi_precharge_reg_pp0_iter1_transferring_buf_val_1_reg_181;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        transferring_buf_val_reg_158 <= transferring_buf_val_2_phi_fu_258_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        transferring_buf_val_reg_158 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        valid_read_resp_reg_146 <= valid_read_resp_3_phi_fu_239_p8;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_read_resp_reg_146 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_apply_transferring_b_reg_134 <= apply_transferring_b_reg_134;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == apply_transferring_b_phi_fu_138_p4))) begin
        empty_n_reg_415 <= comm_next_data_input_buf_addr_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4))) begin
        full_n_1_reg_436 <= user_input_data_V_V_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == transferring_buf_val_1_phi_fu_184_p6) & (1'd0 == tmp_2_fu_330_p2))) begin
        full_n_reg_431 <= full_n_nbwrite_fu_100_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == transferring_buf_val_1_phi_fu_184_p6))) begin
        tmp_2_reg_427 <= tmp_2_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == valid_read_resp_phi_fu_150_p4) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        tmp_V_fu_82 <= comm_read_resp_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == apply_transferring_b_phi_fu_138_p4) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        tmp_fu_78 <= comm_next_data_input_buf_addr_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'd1 == full_n_1_nbwrite_fu_111_p3))) begin
        tmp_s_reg_440 <= tmp_s_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        valid_read_resp_1_reg_224 <= ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_162 == 1'b1)) begin
        if (((apply_transferring_b_reg_134 == 1'd0) & (1'd1 == transferring_buf_val_phi_fu_162_p4))) begin
            apply_transferring_b_1_phi_fu_199_p6 = 1'd0;
        end else if (((apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_phi_fu_162_p4))) begin
            apply_transferring_b_1_phi_fu_199_p6 = 1'd1;
        end else if ((apply_transferring_b_reg_134 == 1'd1)) begin
            apply_transferring_b_1_phi_fu_199_p6 = not_empty_n_i_fu_316_p2;
        end else begin
            apply_transferring_b_1_phi_fu_199_p6 = ap_phi_precharge_reg_pp0_iter1_apply_transferring_b_1_reg_195;
        end
    end else begin
        apply_transferring_b_1_phi_fu_199_p6 = ap_phi_precharge_reg_pp0_iter1_apply_transferring_b_1_reg_195;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        apply_transferring_b_phi_fu_138_p4 = apply_transferring_b_1_phi_fu_199_p6;
    end else begin
        apply_transferring_b_phi_fu_138_p4 = apply_transferring_b_reg_134;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == apply_transferring_b_phi_fu_138_p4) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == comm_next_data_input_buf_addr_V_empty_n))) begin
        comm_next_data_input_buf_addr_V_read = 1'b1;
    end else begin
        comm_next_data_input_buf_addr_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0) & (ap_reg_pp0_iter1_apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_reg_158))) begin
        comm_next_data_input_buf_addr_req_V_blk_n = comm_next_data_input_buf_addr_req_V_full_n;
    end else begin
        comm_next_data_input_buf_addr_req_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_predicate_op72_write_state4) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        comm_next_data_input_buf_addr_req_V_write = 1'b1;
    end else begin
        comm_next_data_input_buf_addr_req_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == transferring_buf_val_1_phi_fu_184_p6) & (1'd0 == tmp_2_fu_330_p2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == (comm_read_req_V_num_full_n & comm_read_req_V_addr_full_n)))) begin
        comm_read_req_V_num1_update = 1'b1;
    end else begin
        comm_read_req_V_num1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == valid_read_resp_phi_fu_150_p4) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == (comm_read_resp_V_last_empty_n & comm_read_resp_V_data_V_empty_n)))) begin
        comm_read_resp_V_last0_update = 1'b1;
    end else begin
        comm_read_resp_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0) & (valid_read_resp_1_reg_224 == 1'd1) & (1'd1 == full_n_1_reg_436) & (1'd1 == tmp_s_reg_440))) begin
        free_input_req_V_blk_n = free_input_req_V_full_n;
    end else begin
        free_input_req_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_predicate_op80_write_state4) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        free_input_req_V_write = 1'b1;
    end else begin
        free_input_req_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_phi_fu_162_p4)) | ((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (apply_transferring_b_reg_134 == 1'd0) & (1'd1 == transferring_buf_val_phi_fu_162_p4)))) begin
        issued_read_req_cnt_2_phi_fu_213_p6 = issued_read_req_cnt_phi_fu_174_p4;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (apply_transferring_b_reg_134 == 1'd1))) begin
        issued_read_req_cnt_2_phi_fu_213_p6 = p_issued_read_req_cnt_fu_322_p3;
    end else begin
        issued_read_req_cnt_2_phi_fu_213_p6 = ap_phi_precharge_reg_pp0_iter1_issued_read_req_cnt_2_reg_210;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == transferring_buf_val_1_reg_181)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0) & (1'd1 == transferring_buf_val_1_reg_181) & (1'd1 == tmp_2_reg_427)))) begin
        issued_read_req_cnt_5_phi_fu_274_p6 = issued_read_req_cnt_2_reg_210;
    end else if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0) & (1'd1 == transferring_buf_val_1_reg_181) & (1'd0 == tmp_2_reg_427))) begin
        issued_read_req_cnt_5_phi_fu_274_p6 = p_issued_read_req_cnt_2_fu_388_p3;
    end else begin
        issued_read_req_cnt_5_phi_fu_274_p6 = ap_phi_precharge_reg_pp0_iter2_issued_read_req_cnt_5_reg_270;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0))) begin
        issued_read_req_cnt_phi_fu_174_p4 = issued_read_req_cnt_5_phi_fu_274_p6;
    end else begin
        issued_read_req_cnt_phi_fu_174_p4 = issued_read_req_cnt_reg_170;
    end
end

always @ (*) begin
    if ((ap_condition_162 == 1'b1)) begin
        if (((apply_transferring_b_reg_134 == 1'd0) & (1'd1 == transferring_buf_val_phi_fu_162_p4))) begin
            transferring_buf_val_1_phi_fu_184_p6 = transferring_buf_val_phi_fu_162_p4;
        end else if (((apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_phi_fu_162_p4))) begin
            transferring_buf_val_1_phi_fu_184_p6 = 1'd0;
        end else if ((apply_transferring_b_reg_134 == 1'd1)) begin
            transferring_buf_val_1_phi_fu_184_p6 = empty_n_reg_415;
        end else begin
            transferring_buf_val_1_phi_fu_184_p6 = ap_phi_precharge_reg_pp0_iter1_transferring_buf_val_1_reg_181;
        end
    end else begin
        transferring_buf_val_1_phi_fu_184_p6 = ap_phi_precharge_reg_pp0_iter1_transferring_buf_val_1_reg_181;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0))) begin
        if (((1'd1 == transferring_buf_val_1_reg_181) & (1'd1 == tmp_2_reg_427))) begin
            transferring_buf_val_2_phi_fu_258_p6 = 1'd0;
        end else if ((1'd0 == transferring_buf_val_1_reg_181)) begin
            transferring_buf_val_2_phi_fu_258_p6 = transferring_buf_val_1_reg_181;
        end else if (((1'd1 == transferring_buf_val_1_reg_181) & (1'd0 == tmp_2_reg_427))) begin
            transferring_buf_val_2_phi_fu_258_p6 = 1'd1;
        end else begin
            transferring_buf_val_2_phi_fu_258_p6 = ap_phi_precharge_reg_pp0_iter2_transferring_buf_val_2_reg_254;
        end
    end else begin
        transferring_buf_val_2_phi_fu_258_p6 = ap_phi_precharge_reg_pp0_iter2_transferring_buf_val_2_reg_254;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0))) begin
        transferring_buf_val_phi_fu_162_p4 = transferring_buf_val_2_phi_fu_258_p6;
    end else begin
        transferring_buf_val_phi_fu_162_p4 = transferring_buf_val_reg_158;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == user_input_data_V_V_full_n))) begin
        user_input_data_V_V_write = 1'b1;
    end else begin
        user_input_data_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == full_n_1_nbwrite_fu_111_p3))) begin
        valid_read_resp_3_phi_fu_239_p8 = 1'd1;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == valid_read_resp_1_phi_fu_227_p4))) begin
        valid_read_resp_3_phi_fu_239_p8 = ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224;
    end else if ((((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'd1 == full_n_1_nbwrite_fu_111_p3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_s_fu_371_p2)) | ((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == valid_read_resp_1_phi_fu_227_p4) & (1'd1 == full_n_1_nbwrite_fu_111_p3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == tmp_s_fu_371_p2)))) begin
        valid_read_resp_3_phi_fu_239_p8 = 1'd0;
    end else begin
        valid_read_resp_3_phi_fu_239_p8 = ap_phi_precharge_reg_pp0_iter1_valid_read_resp_3_reg_235;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        valid_read_resp_phi_fu_150_p4 = valid_read_resp_3_phi_fu_239_p8;
    end else begin
        valid_read_resp_phi_fu_150_p4 = valid_read_resp_reg_146;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (((1'b0 == comm_next_data_input_buf_addr_req_V_full_n) & (1'b1 == ap_predicate_op72_write_state4)) | ((1'b0 == free_input_req_V_full_n) & (1'b1 == ap_predicate_op80_write_state4))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (((1'b0 == comm_next_data_input_buf_addr_req_V_full_n) & (1'b1 == ap_predicate_op72_write_state4)) | ((1'b0 == free_input_req_V_full_n) & (1'b1 == ap_predicate_op80_write_state4))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_enable_reg_pp0_iter2) & (((1'b0 == comm_next_data_input_buf_addr_req_V_full_n) & (1'b1 == ap_predicate_op72_write_state4)) | ((1'b0 == free_input_req_V_full_n) & (1'b1 == ap_predicate_op80_write_state4))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((1'b0 == comm_next_data_input_buf_addr_req_V_full_n) & (1'b1 == ap_predicate_op72_write_state4)) | ((1'b0 == free_input_req_V_full_n) & (1'b1 == ap_predicate_op80_write_state4)));
end

always @ (*) begin
    ap_condition_161 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1));
end

always @ (*) begin
    ap_condition_162 = ((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1));
end

always @ (*) begin
    ap_condition_194 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_precharge_reg_pp0_iter0_valid_read_resp_1_reg_224 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_apply_transferring_b_1_reg_195 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_issued_read_req_cnt_2_reg_210 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_transferring_buf_val_1_reg_181 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_valid_read_resp_3_reg_235 = 'bx;

assign ap_phi_precharge_reg_pp0_iter2_issued_read_req_cnt_5_reg_270 = 'bx;

assign ap_phi_precharge_reg_pp0_iter2_transferring_buf_val_2_reg_254 = 'bx;

always @ (*) begin
    ap_predicate_op72_write_state4 = ((ap_reg_pp0_iter1_apply_transferring_b_reg_134 == 1'd0) & (1'd0 == transferring_buf_val_reg_158));
end

always @ (*) begin
    ap_predicate_op80_write_state4 = ((valid_read_resp_1_reg_224 == 1'd1) & (1'd1 == full_n_1_reg_436) & (1'd1 == tmp_s_reg_440));
end

assign ap_ready = 1'b0;

assign comm_next_data_input_buf_addr_req_V_din = 1'd0;

assign comm_read_req_V_addr_din = (tmp_5_fu_347_p1 + tmp_fu_78);

assign comm_read_req_V_addr_write = comm_read_req_V_num1_update;

assign comm_read_req_V_num_din = 8'd16;

assign comm_read_req_V_num_write = comm_read_req_V_num1_update;

assign comm_read_resp_V_data_V_read = comm_read_resp_V_last0_update;

assign comm_read_resp_V_last_read = comm_read_resp_V_last0_update;

assign consumed_data_size_1_fu_365_p2 = (consumed_data_size_fu_74 + 32'd64);

assign empty_n_1_nbread_fu_92_p3_0 = (comm_read_resp_V_last_empty_n & comm_read_resp_V_data_V_empty_n);

assign free_input_req_V_din = 1'd0;

assign full_n_1_nbwrite_fu_111_p3 = user_input_data_V_V_full_n;

assign full_n_nbwrite_fu_100_p5 = (comm_read_req_V_num_full_n & comm_read_req_V_addr_full_n);

assign issued_read_req_cnt_1_fu_382_p2 = (issued_read_req_cnt_2_reg_210 + 16'd1);

assign not_empty_n_i_fu_316_p2 = (empty_n_reg_415 ^ 1'd1);

assign p_issued_read_req_cnt_2_fu_388_p3 = ((full_n_reg_431[0:0] === 1'b1) ? issued_read_req_cnt_1_fu_382_p2 : issued_read_req_cnt_2_reg_210);

assign p_issued_read_req_cnt_fu_322_p3 = ((empty_n_reg_415[0:0] === 1'b1) ? 16'd0 : issued_read_req_cnt_phi_fu_174_p4);

assign tmp_2_fu_330_p2 = ((issued_read_req_cnt_2_phi_fu_213_p6 == 16'd4096) ? 1'b1 : 1'b0);

assign tmp_4_fu_339_p3 = {{issued_read_req_cnt_2_phi_fu_213_p6}, {10'd0}};

assign tmp_5_fu_347_p1 = tmp_4_fu_339_p3;

assign tmp_s_fu_371_p2 = ((consumed_data_size_1_fu_365_p2 == 32'd4194304) ? 1'b1 : 1'b0);

assign user_input_data_V_V_din = tmp_V_fu_82;

assign valid_read_resp_1_phi_fu_227_p4 = ap_phi_precharge_reg_pp0_iter1_valid_read_resp_1_reg_224;

endmodule //comm_reader
