// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pcie_read_anti_stutter,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.122250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=1192,HLS_SYN_LUT=1069}" *)

module pcie_read_anti_stutter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        pcie_read_req_V_num_din,
        pcie_read_req_V_num_full_n,
        pcie_read_req_V_num_write,
        pcie_read_req_V_addr_din,
        pcie_read_req_V_addr_full_n,
        pcie_read_req_V_addr_write,
        pcie_read_resp_V_last_dout,
        pcie_read_resp_V_last_empty_n,
        pcie_read_resp_V_last_read,
        pcie_read_resp_V_data_V_dout,
        pcie_read_resp_V_data_V_empty_n,
        pcie_read_resp_V_data_V_read,
        comm_read_req_V_num_dout,
        comm_read_req_V_num_empty_n,
        comm_read_req_V_num_read,
        comm_read_req_V_addr_dout,
        comm_read_req_V_addr_empty_n,
        comm_read_req_V_addr_read,
        comm_read_resp_V_last_din,
        comm_read_resp_V_last_full_n,
        comm_read_resp_V_last_write,
        comm_read_resp_V_data_V_din,
        comm_read_resp_V_data_V_full_n,
        comm_read_resp_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
output  [7:0] pcie_read_req_V_num_din;
input   pcie_read_req_V_num_full_n;
output   pcie_read_req_V_num_write;
output  [63:0] pcie_read_req_V_addr_din;
input   pcie_read_req_V_addr_full_n;
output   pcie_read_req_V_addr_write;
input   pcie_read_resp_V_last_dout;
input   pcie_read_resp_V_last_empty_n;
output   pcie_read_resp_V_last_read;
input  [511:0] pcie_read_resp_V_data_V_dout;
input   pcie_read_resp_V_data_V_empty_n;
output   pcie_read_resp_V_data_V_read;
input  [7:0] comm_read_req_V_num_dout;
input   comm_read_req_V_num_empty_n;
output   comm_read_req_V_num_read;
input  [63:0] comm_read_req_V_addr_dout;
input   comm_read_req_V_addr_empty_n;
output   comm_read_req_V_addr_read;
output   comm_read_resp_V_last_din;
input   comm_read_resp_V_last_full_n;
output   comm_read_resp_V_last_write;
output  [511:0] comm_read_resp_V_data_V_din;
input   comm_read_resp_V_data_V_full_n;
output   comm_read_resp_V_data_V_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] head_reg_180;
reg   [0:0] valid_req_reg_192;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] tail_reg_204;
reg   [15:0] reserved_size_reg_215;
reg   [0:0] tail_inc_reg_227;
reg   [0:0] tail_inc_2_reg_268;
reg   [0:0] valid_req_phi_fu_196_p4;
wire   [0:0] empty_n_3_fu_344_p1;
reg   [0:0] empty_n_3_reg_608;
reg   [0:0] tmp_last_2_reg_612;
reg   [511:0] tmp_data_V_2_reg_617;
wire   [0:0] icmp_fu_384_p2;
wire   [0:0] valid_req_1_phi_fu_241_p4;
wire   [0:0] full_n_nbwrite_fu_118_p5;
wire   [15:0] reserved_size_1_fu_401_p2;
wire   [15:0] head_3_fu_466_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] valid_resp_2_fu_480_p2;
reg   [0:0] valid_resp_2_reg_640;
wire   [15:0] tail_2_fu_506_p3;
reg   [15:0] tail_2_reg_644;
wire   [0:0] full_n_1_nbwrite_fu_128_p5;
reg   [0:0] full_n_1_reg_649;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [9:0] buf_last_address0;
reg    buf_last_ce0;
wire   [0:0] buf_last_q0;
wire   [9:0] buf_last_address1;
reg    buf_last_ce1;
reg    buf_last_we1;
wire   [9:0] buf_data_V_address0;
reg    buf_data_V_ce0;
wire   [511:0] buf_data_V_q0;
wire   [9:0] buf_data_V_address1;
reg    buf_data_V_ce1;
reg    buf_data_V_we1;
reg   [15:0] head_phi_fu_184_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] valid_req_4_phi_fu_253_p8;
reg   [15:0] tail_phi_fu_208_p4;
reg   [15:0] reserved_size_phi_fu_219_p4;
reg   [15:0] reserved_size_5_phi_fu_303_p4;
reg   [0:0] tail_inc_phi_fu_231_p4;
wire   [0:0] ap_phi_precharge_reg_pp0_iter0_valid_req_1_reg_238;
reg   [0:0] ap_phi_precharge_reg_pp0_iter1_valid_req_1_reg_238;
wire   [0:0] ap_phi_precharge_reg_pp0_iter1_valid_req_4_reg_249;
wire   [0:0] ap_phi_precharge_reg_pp0_iter0_tail_inc_2_reg_268;
reg   [0:0] ap_phi_precharge_reg_pp0_iter1_tail_inc_2_reg_268;
wire   [15:0] ap_phi_precharge_reg_pp0_iter1_reserved_size_3_reg_283;
reg   [15:0] ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283;
wire   [15:0] p_reserved_size_3_fu_552_p3;
wire   [15:0] ap_phi_precharge_reg_pp0_iter2_reserved_size_5_reg_299;
wire   [63:0] tmp_s_fu_338_p1;
wire   [63:0] tmp_9_fu_540_p1;
reg    comm_read_req_V_num0_update;
wire   [0:0] empty_n_2_nbread_fu_102_p3_0;
reg    pcie_read_resp_V_last0_update;
wire   [0:0] empty_n_nbread_fu_110_p3_0;
reg    pcie_read_req_V_num1_update;
wire    ap_block_pp0_stage0_01001;
reg    comm_read_resp_V_last1_update;
wire   [0:0] resp_last_2_fu_457_p3;
wire   [511:0] resp_data_V_2_fu_448_p3;
reg   [0:0] tmp_last_fu_74;
reg   [511:0] tmp_data_V_fu_78;
reg   [0:0] valid_resp_fu_82;
wire   [0:0] not_full_n_i3_fu_529_p2;
reg   [7:0] tmp_num_fu_86;
reg   [63:0] tmp_addr_fu_90;
wire   [16:0] tmp_1_cast_fu_360_p1;
wire   [16:0] tmp_2_cast_fu_364_p1;
wire   [16:0] tmp_3_fu_368_p2;
wire   [6:0] tmp_1_fu_374_p4;
wire   [15:0] tmp_6_fu_397_p1;
wire   [0:0] tmp_8_fu_416_p2;
wire   [15:0] head_1_fu_428_p2;
wire   [0:0] tmp_5_fu_434_p2;
wire   [0:0] or_cond_fu_422_p2;
wire   [15:0] p_s_fu_440_p3;
wire   [0:0] tmp_8_not_fu_474_p2;
wire   [15:0] tail_1_fu_486_p2;
wire   [0:0] tmp_7_fu_492_p2;
wire   [15:0] p_1_fu_498_p3;
wire   [15:0] reserved_size_2_fu_546_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_185;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

pcie_read_anti_stbkb #(
    .DataWidth( 1 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_last_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_last_address0),
    .ce0(buf_last_ce0),
    .q0(buf_last_q0),
    .address1(buf_last_address1),
    .ce1(buf_last_ce1),
    .we1(buf_last_we1),
    .d1(tmp_last_2_reg_612)
);

pcie_read_anti_stcud #(
    .DataWidth( 512 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_data_V_address0),
    .ce0(buf_data_V_ce0),
    .q0(buf_data_V_q0),
    .address1(buf_data_V_address1),
    .ce1(buf_data_V_ce1),
    .we1(buf_data_V_we1),
    .d1(tmp_data_V_2_reg_617)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_185 == 1'b1)) begin
        if ((1'd0 == empty_n_3_fu_344_p1)) begin
            ap_phi_precharge_reg_pp0_iter1_tail_inc_2_reg_268 <= 1'd0;
        end else if ((empty_n_3_fu_344_p1 == 1'd1)) begin
            ap_phi_precharge_reg_pp0_iter1_tail_inc_2_reg_268 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter1_tail_inc_2_reg_268 <= ap_phi_precharge_reg_pp0_iter0_tail_inc_2_reg_268;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_185 == 1'b1)) begin
        if ((valid_req_phi_fu_196_p4 == 1'd1)) begin
            ap_phi_precharge_reg_pp0_iter1_valid_req_1_reg_238 <= valid_req_phi_fu_196_p4;
        end else if ((valid_req_phi_fu_196_p4 == 1'd0)) begin
            ap_phi_precharge_reg_pp0_iter1_valid_req_1_reg_238 <= empty_n_2_nbread_fu_102_p3_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter1_valid_req_1_reg_238 <= ap_phi_precharge_reg_pp0_iter0_valid_req_1_reg_238;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == valid_req_1_phi_fu_241_p4)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == icmp_fu_384_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (icmp_fu_384_p2 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == full_n_nbwrite_fu_118_p5)))) begin
        ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283 <= reserved_size_phi_fu_219_p4;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (icmp_fu_384_p2 == 1'd1) & (1'd1 == full_n_nbwrite_fu_118_p5) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283 <= reserved_size_1_fu_401_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283 <= ap_phi_precharge_reg_pp0_iter1_reserved_size_3_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        head_reg_180 <= head_3_fu_466_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        head_reg_180 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        reserved_size_reg_215 <= reserved_size_5_phi_fu_303_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reserved_size_reg_215 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tail_inc_reg_227 <= tail_inc_2_reg_268;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tail_inc_reg_227 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tail_reg_204 <= tail_2_reg_644;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tail_reg_204 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        valid_req_reg_192 <= valid_req_4_phi_fu_253_p8;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_req_reg_192 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == valid_resp_2_fu_480_p2))) begin
        valid_resp_fu_82 <= not_full_n_i3_fu_529_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == valid_resp_2_fu_480_p2))) begin
        valid_resp_fu_82 <= valid_resp_2_fu_480_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_resp_fu_82 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        empty_n_3_reg_608 <= empty_n_nbread_fu_110_p3_0;
        tmp_data_V_2_reg_617 <= pcie_read_resp_V_data_V_dout;
        tmp_last_2_reg_612 <= pcie_read_resp_V_last_dout;
        valid_resp_2_reg_640 <= valid_resp_2_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == valid_resp_2_fu_480_p2))) begin
        full_n_1_reg_649 <= full_n_1_nbwrite_fu_128_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        tail_2_reg_644 <= tail_2_fu_506_p3;
        tail_inc_2_reg_268 <= ap_phi_precharge_reg_pp0_iter1_tail_inc_2_reg_268;
        tmp_data_V_fu_78 <= resp_data_V_2_fu_448_p3;
        tmp_last_fu_74 <= resp_last_2_fu_457_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (valid_req_phi_fu_196_p4 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        tmp_addr_fu_90 <= comm_read_req_V_addr_dout;
        tmp_num_fu_86 <= comm_read_req_V_num_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buf_data_V_ce0 = 1'b1;
    end else begin
        buf_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_data_V_ce1 = 1'b1;
    end else begin
        buf_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (empty_n_3_reg_608 == 1'd1))) begin
        buf_data_V_we1 = 1'b1;
    end else begin
        buf_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buf_last_ce0 = 1'b1;
    end else begin
        buf_last_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_last_ce1 = 1'b1;
    end else begin
        buf_last_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (empty_n_3_reg_608 == 1'd1))) begin
        buf_last_we1 = 1'b1;
    end else begin
        buf_last_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (valid_req_phi_fu_196_p4 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == (comm_read_req_V_num_empty_n & comm_read_req_V_addr_empty_n)))) begin
        comm_read_req_V_num0_update = 1'b1;
    end else begin
        comm_read_req_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == valid_resp_2_fu_480_p2) & (1'b1 == (comm_read_resp_V_last_full_n & comm_read_resp_V_data_V_full_n)))) begin
        comm_read_resp_V_last1_update = 1'b1;
    end else begin
        comm_read_resp_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        head_phi_fu_184_p4 = head_3_fu_466_p3;
    end else begin
        head_phi_fu_184_p4 = head_reg_180;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (icmp_fu_384_p2 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == (pcie_read_req_V_num_full_n & pcie_read_req_V_addr_full_n)))) begin
        pcie_read_req_V_num1_update = 1'b1;
    end else begin
        pcie_read_req_V_num1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == (pcie_read_resp_V_last_empty_n & pcie_read_resp_V_data_V_empty_n)))) begin
        pcie_read_resp_V_last0_update = 1'b1;
    end else begin
        pcie_read_resp_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        if ((1'd0 == valid_resp_2_reg_640)) begin
            reserved_size_5_phi_fu_303_p4 = ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283;
        end else if ((1'd1 == valid_resp_2_reg_640)) begin
            reserved_size_5_phi_fu_303_p4 = p_reserved_size_3_fu_552_p3;
        end else begin
            reserved_size_5_phi_fu_303_p4 = ap_phi_precharge_reg_pp0_iter2_reserved_size_5_reg_299;
        end
    end else begin
        reserved_size_5_phi_fu_303_p4 = ap_phi_precharge_reg_pp0_iter2_reserved_size_5_reg_299;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        reserved_size_phi_fu_219_p4 = reserved_size_5_phi_fu_303_p4;
    end else begin
        reserved_size_phi_fu_219_p4 = reserved_size_reg_215;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tail_inc_phi_fu_231_p4 = tail_inc_2_reg_268;
    end else begin
        tail_inc_phi_fu_231_p4 = tail_inc_reg_227;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tail_phi_fu_208_p4 = tail_2_reg_644;
    end else begin
        tail_phi_fu_208_p4 = tail_reg_204;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == icmp_fu_384_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (icmp_fu_384_p2 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == full_n_nbwrite_fu_118_p5)))) begin
        valid_req_4_phi_fu_253_p8 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == valid_req_1_phi_fu_241_p4))) begin
        valid_req_4_phi_fu_253_p8 = ap_phi_precharge_reg_pp0_iter1_valid_req_1_reg_238;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (valid_req_1_phi_fu_241_p4 == 1'd1) & (icmp_fu_384_p2 == 1'd1) & (1'd1 == full_n_nbwrite_fu_118_p5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        valid_req_4_phi_fu_253_p8 = 1'd0;
    end else begin
        valid_req_4_phi_fu_253_p8 = ap_phi_precharge_reg_pp0_iter1_valid_req_4_reg_249;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        valid_req_phi_fu_196_p4 = valid_req_4_phi_fu_253_p8;
    end else begin
        valid_req_phi_fu_196_p4 = valid_req_reg_192;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_185 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_precharge_reg_pp0_iter0_tail_inc_2_reg_268 = 'bx;

assign ap_phi_precharge_reg_pp0_iter0_valid_req_1_reg_238 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_reserved_size_3_reg_283 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_valid_req_4_reg_249 = 'bx;

assign ap_phi_precharge_reg_pp0_iter2_reserved_size_5_reg_299 = 'bx;

assign ap_ready = 1'b0;

assign buf_data_V_address0 = tmp_s_fu_338_p1;

assign buf_data_V_address1 = tmp_9_fu_540_p1;

assign buf_last_address0 = tmp_s_fu_338_p1;

assign buf_last_address1 = tmp_9_fu_540_p1;

assign comm_read_req_V_addr_read = comm_read_req_V_num0_update;

assign comm_read_req_V_num_read = comm_read_req_V_num0_update;

assign comm_read_resp_V_data_V_din = ((or_cond_fu_422_p2[0:0] === 1'b1) ? tmp_data_V_fu_78 : buf_data_V_q0);

assign comm_read_resp_V_data_V_write = comm_read_resp_V_last1_update;

assign comm_read_resp_V_last_din = ((or_cond_fu_422_p2[0:0] === 1'b1) ? tmp_last_fu_74 : buf_last_q0);

assign comm_read_resp_V_last_write = comm_read_resp_V_last1_update;

assign empty_n_2_nbread_fu_102_p3_0 = (comm_read_req_V_num_empty_n & comm_read_req_V_addr_empty_n);

assign empty_n_3_fu_344_p1 = empty_n_nbread_fu_110_p3_0;

assign empty_n_nbread_fu_110_p3_0 = (pcie_read_resp_V_last_empty_n & pcie_read_resp_V_data_V_empty_n);

assign full_n_1_nbwrite_fu_128_p5 = (comm_read_resp_V_last_full_n & comm_read_resp_V_data_V_full_n);

assign full_n_nbwrite_fu_118_p5 = (pcie_read_req_V_num_full_n & pcie_read_req_V_addr_full_n);

assign head_1_fu_428_p2 = (head_reg_180 + 16'd1);

assign head_3_fu_466_p3 = ((or_cond_fu_422_p2[0:0] === 1'b1) ? head_reg_180 : p_s_fu_440_p3);

assign icmp_fu_384_p2 = ((tmp_1_fu_374_p4 == 7'd0) ? 1'b1 : 1'b0);

assign not_full_n_i3_fu_529_p2 = (full_n_1_nbwrite_fu_128_p5 ^ 1'd1);

assign or_cond_fu_422_p2 = (valid_resp_fu_82 | tmp_8_fu_416_p2);

assign p_1_fu_498_p3 = ((tmp_7_fu_492_p2[0:0] === 1'b1) ? 16'd0 : tail_1_fu_486_p2);

assign p_reserved_size_3_fu_552_p3 = ((full_n_1_reg_649[0:0] === 1'b1) ? reserved_size_2_fu_546_p2 : ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283);

assign p_s_fu_440_p3 = ((tmp_5_fu_434_p2[0:0] === 1'b1) ? 16'd0 : head_1_fu_428_p2);

assign pcie_read_req_V_addr_din = tmp_addr_fu_90;

assign pcie_read_req_V_addr_write = pcie_read_req_V_num1_update;

assign pcie_read_req_V_num_din = tmp_num_fu_86;

assign pcie_read_req_V_num_write = pcie_read_req_V_num1_update;

assign pcie_read_resp_V_data_V_read = pcie_read_resp_V_last0_update;

assign pcie_read_resp_V_last_read = pcie_read_resp_V_last0_update;

assign reserved_size_1_fu_401_p2 = (reserved_size_phi_fu_219_p4 + tmp_6_fu_397_p1);

assign reserved_size_2_fu_546_p2 = ($signed(ap_phi_precharge_reg_pp0_iter2_reserved_size_3_reg_283) + $signed(16'd65535));

assign resp_data_V_2_fu_448_p3 = ((or_cond_fu_422_p2[0:0] === 1'b1) ? tmp_data_V_fu_78 : buf_data_V_q0);

assign resp_last_2_fu_457_p3 = ((or_cond_fu_422_p2[0:0] === 1'b1) ? tmp_last_fu_74 : buf_last_q0);

assign tail_1_fu_486_p2 = (tail_phi_fu_208_p4 + 16'd1);

assign tail_2_fu_506_p3 = ((tail_inc_phi_fu_231_p4[0:0] === 1'b1) ? p_1_fu_498_p3 : tail_phi_fu_208_p4);

assign tmp_1_cast_fu_360_p1 = reserved_size_phi_fu_219_p4;

assign tmp_1_fu_374_p4 = {{tmp_3_fu_368_p2[16:10]}};

assign tmp_2_cast_fu_364_p1 = tmp_num_fu_86;

assign tmp_3_fu_368_p2 = (tmp_1_cast_fu_360_p1 + tmp_2_cast_fu_364_p1);

assign tmp_5_fu_434_p2 = ((head_1_fu_428_p2 == 16'd1024) ? 1'b1 : 1'b0);

assign tmp_6_fu_397_p1 = tmp_num_fu_86;

assign tmp_7_fu_492_p2 = ((tail_1_fu_486_p2 == 16'd1024) ? 1'b1 : 1'b0);

assign tmp_8_fu_416_p2 = ((head_reg_180 == tail_phi_fu_208_p4) ? 1'b1 : 1'b0);

assign tmp_8_not_fu_474_p2 = (tmp_8_fu_416_p2 ^ 1'd1);

assign tmp_9_fu_540_p1 = tail_2_fu_506_p3;

assign tmp_s_fu_338_p1 = head_phi_fu_184_p4;

assign valid_req_1_phi_fu_241_p4 = ap_phi_precharge_reg_pp0_iter1_valid_req_1_reg_238;

assign valid_resp_2_fu_480_p2 = (valid_resp_fu_82 | tmp_8_not_fu_474_p2);

endmodule //pcie_read_anti_stutter
