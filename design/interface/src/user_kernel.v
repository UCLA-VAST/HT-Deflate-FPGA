// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="user_kernel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.474000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=517,HLS_SYN_LUT=684}" *)

module user_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        user_input_data_V_V_dout,
        user_input_data_V_V_empty_n,
        user_input_data_V_V_read,
        user_output_data_V_V_din,
        user_output_data_V_V_full_n,
        user_output_data_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output  ap_done;
output  ap_idle;
output  ap_ready; 
output  ap_continue;
input   [511:0] user_input_data_V_V_dout;
input   user_input_data_V_V_empty_n;
input   user_output_data_V_V_full_n;
output  user_input_data_V_V_read;
output  [511:0] user_output_data_V_V_din;
output  user_output_data_V_V_write;

reg ap_idle;
reg user_input_data_V_V_read;
reg user_output_data_V_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    user_output_data_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_n_reg_392;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [511:0] tmp_V_1_reg_396;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_1_fu_121_p1;
wire   [31:0] p_Result_2_fu_130_p4;
wire   [31:0] p_Result_4_fu_145_p4;
wire   [31:0] p_Result_6_fu_160_p4;
wire   [31:0] p_Result_8_fu_175_p4;
wire   [31:0] p_Result_s_fu_190_p4;
wire   [31:0] p_Result_1_fu_205_p4;
wire   [31:0] p_Result_3_fu_220_p4;
wire   [31:0] p_Result_5_fu_235_p4;
wire   [31:0] p_Result_7_fu_250_p4;
wire   [31:0] p_Result_9_fu_265_p4;
wire   [31:0] p_Result_10_fu_280_p4;
wire   [31:0] p_Result_11_fu_295_p4;
wire   [31:0] p_Result_12_fu_310_p4;
wire   [31:0] p_Result_13_fu_325_p4;
wire   [31:0] p_Result_14_fu_340_p4;
wire   [31:0] loc_V_15_trunc_fu_349_p2;
wire   [31:0] loc_V_14_trunc_fu_334_p2;
wire   [31:0] loc_V_13_trunc_fu_319_p2;
wire   [31:0] loc_V_12_trunc_fu_304_p2;
wire   [31:0] loc_V_11_trunc_fu_289_p2;
wire   [31:0] loc_V_10_trunc_fu_274_p2;
wire   [31:0] loc_V_9_trunc_fu_259_p2;
wire   [31:0] loc_V_8_trunc_fu_244_p2;
wire   [31:0] loc_V_7_trunc_fu_229_p2;
wire   [31:0] loc_V_6_trunc_fu_214_p2;
wire   [31:0] loc_V_5_trunc_fu_199_p2;
wire   [31:0] loc_V_4_trunc_fu_184_p2;
wire   [31:0] loc_V_3_trunc_fu_169_p2;
wire   [31:0] loc_V_2_trunc_fu_154_p2;
wire   [31:0] loc_V_1_trunc_fu_139_p2;
wire   [31:0] loc_V_trunc_fu_124_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        empty_n_reg_392 <= user_input_data_V_V_empty_n;
        tmp_V_1_reg_396 <= user_input_data_V_V_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == user_input_data_V_V_empty_n))) begin
        user_input_data_V_V_read = 1'b1;
    end else begin
        user_input_data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (empty_n_reg_392 == 1'd1))) begin
        user_output_data_V_V_blk_n = user_output_data_V_V_full_n;
    end else begin
        user_output_data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (empty_n_reg_392 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        user_output_data_V_V_write = 1'b1;
    end else begin
        user_output_data_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (empty_n_reg_392 == 1'd1) & (1'b0 == user_output_data_V_V_full_n));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (empty_n_reg_392 == 1'd1) & (1'b0 == user_output_data_V_V_full_n));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (empty_n_reg_392 == 1'd1) & (1'b0 == user_output_data_V_V_full_n));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((empty_n_reg_392 == 1'd1) & (1'b0 == user_output_data_V_V_full_n));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = 1'b0;

assign loc_V_10_trunc_fu_274_p2 = (32'd1 + p_Result_9_fu_265_p4);

assign loc_V_11_trunc_fu_289_p2 = (32'd1 + p_Result_10_fu_280_p4);

assign loc_V_12_trunc_fu_304_p2 = (32'd1 + p_Result_11_fu_295_p4);

assign loc_V_13_trunc_fu_319_p2 = (32'd1 + p_Result_12_fu_310_p4);

assign loc_V_14_trunc_fu_334_p2 = (32'd1 + p_Result_13_fu_325_p4);

assign loc_V_15_trunc_fu_349_p2 = (32'd1 + p_Result_14_fu_340_p4);

assign loc_V_1_trunc_fu_139_p2 = (32'd1 + p_Result_2_fu_130_p4);

assign loc_V_2_trunc_fu_154_p2 = (32'd1 + p_Result_4_fu_145_p4);

assign loc_V_3_trunc_fu_169_p2 = (32'd1 + p_Result_6_fu_160_p4);

assign loc_V_4_trunc_fu_184_p2 = (32'd1 + p_Result_8_fu_175_p4);

assign loc_V_5_trunc_fu_199_p2 = (32'd1 + p_Result_s_fu_190_p4);

assign loc_V_6_trunc_fu_214_p2 = (32'd1 + p_Result_1_fu_205_p4);

assign loc_V_7_trunc_fu_229_p2 = (32'd1 + p_Result_3_fu_220_p4);

assign loc_V_8_trunc_fu_244_p2 = (32'd1 + p_Result_5_fu_235_p4);

assign loc_V_9_trunc_fu_259_p2 = (32'd1 + p_Result_7_fu_250_p4);

assign loc_V_trunc_fu_124_p2 = (32'd1 + tmp_1_fu_121_p1);

assign p_Result_10_fu_280_p4 = {{tmp_V_1_reg_396[383:352]}};

assign p_Result_11_fu_295_p4 = {{tmp_V_1_reg_396[415:384]}};

assign p_Result_12_fu_310_p4 = {{tmp_V_1_reg_396[447:416]}};

assign p_Result_13_fu_325_p4 = {{tmp_V_1_reg_396[479:448]}};

assign p_Result_14_fu_340_p4 = {{tmp_V_1_reg_396[511:480]}};

assign p_Result_1_fu_205_p4 = {{tmp_V_1_reg_396[223:192]}};

assign p_Result_2_fu_130_p4 = {{tmp_V_1_reg_396[63:32]}};

assign p_Result_3_fu_220_p4 = {{tmp_V_1_reg_396[255:224]}};

assign p_Result_4_fu_145_p4 = {{tmp_V_1_reg_396[95:64]}};

assign p_Result_5_fu_235_p4 = {{tmp_V_1_reg_396[287:256]}};

assign p_Result_6_fu_160_p4 = {{tmp_V_1_reg_396[127:96]}};

assign p_Result_7_fu_250_p4 = {{tmp_V_1_reg_396[319:288]}};

assign p_Result_8_fu_175_p4 = {{tmp_V_1_reg_396[159:128]}};

assign p_Result_9_fu_265_p4 = {{tmp_V_1_reg_396[351:320]}};

assign p_Result_s_fu_190_p4 = {{tmp_V_1_reg_396[191:160]}};

assign tmp_1_fu_121_p1 = tmp_V_1_reg_396[31:0];

assign user_output_data_V_V_din = {{{{{{{{{{{{{{{{loc_V_15_trunc_fu_349_p2}, {loc_V_14_trunc_fu_334_p2}}, {loc_V_13_trunc_fu_319_p2}}, {loc_V_12_trunc_fu_304_p2}}, {loc_V_11_trunc_fu_289_p2}}, {loc_V_10_trunc_fu_274_p2}}, {loc_V_9_trunc_fu_259_p2}}, {loc_V_8_trunc_fu_244_p2}}, {loc_V_7_trunc_fu_229_p2}}, {loc_V_6_trunc_fu_214_p2}}, {loc_V_5_trunc_fu_199_p2}}, {loc_V_4_trunc_fu_184_p2}}, {loc_V_3_trunc_fu_169_p2}}, {loc_V_2_trunc_fu_154_p2}}, {loc_V_1_trunc_fu_139_p2}}, {loc_V_trunc_fu_124_p2}};

endmodule //user_kernel
